language: php
dist: focal

services:
    - mysql

notifications:
  email:
    on_success: never
    on_failure: change

cache:
  directories:
    - $HOME/.composer/cache

php:
  - 7.4

env:
  - WP_VERSION=latest

matrix:
  fast_finish: true
  include:
    - name: Coding Standards
      php: 7.4
      env: WP_VERSION=latest RUN_PHPCS=1
    - name: Code Coverage
      php: 7.4
      env: WP_VERSION=latest RUN_CODE_COVERAGE=1
    - name: Bleeding Edge
      php: nightly
      env: WP_VERSION=trunk
  allow_failures:
    - name: Code Coverage
    - name: Bleeding Edge

before_install:
  - phpenv config-rm xdebug.ini || true

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
# before_install:

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  # Set up WordPress installation.
  - export WP_DEVELOP_DIR=/tmp/wordpress/
  - mkdir -p $WP_DEVELOP_DIR
  # Use the Git mirror of WordPress.
  #- git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
  # Set up theme information.
  - theme_slug=$(basename $(pwd))
  #- theme_dir=$WP_DEVELOP_DIR/src/wp-content/themes/$theme_slug
  - theme_dir=$WP_DEVELOP_DIR/$theme_slug
  - cd ..
  - mv $theme_slug $theme_dir
  # Set up WordPress configuration.
  - cd $WP_DEVELOP_DIR
  - echo $WP_DEVELOP_DIR
  #- cp wp-tests-config-sample.php wp-tests-config.php
  #- sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
  #- sed -i "s/yourusernamehere/root/" wp-tests-config.php
  #- sed -i "s/yourpasswordhere//" wp-tests-config.php
  # Create WordPress database.
  #- mysql -e 'CREATE DATABASE wordpress_test;' -uroot
  # Install CodeSniffer for WordPress Coding Standards checks.
  - git clone https://github.com/squizlabs/PHP_CodeSniffer.git phpcs
  # Install WordPress Coding Standards.
  - git clone -b master https://github.com/WordPress/WordPress-Coding-Standards.git wpcs
  
  # Hop into CodeSniffer directory.
  - cd phpcs
  # Set install paths for Coding Standards.
  - ./bin/phpcs --config-set installed_paths "/tmp/wordpress/wpcs"
  # Hop into themes directory.
  - cd $theme_dir
  # After CodeSniffer install you should refresh your path.
  - phpenv rehash


# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # WordPress Coding Standards
  # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
  # @link http://pear.php.net/package/PHP_CodeSniffer/
  # -p flag: Show progress of the run.
  # -s flag: Show sniff codes in all reports.
  # -v flag: Print verbose output.
  # -n flag: Do not print warnings. (shortcut for --warning-severity=0)
  # --standard: Use WordPress as the standard.
  # --extensions: Only sniff PHP files.
  - $WP_DEVELOP_DIR/phpcs/bin/phpcs --colors -p -s -v -n --standard=./.phpcs.xml